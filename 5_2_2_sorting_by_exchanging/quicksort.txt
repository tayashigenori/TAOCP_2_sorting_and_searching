function quicksort(array)
    if length(array) ≤ 1
        return array  // an array of zero or one elements is already sorted
    select and remove a pivot element pivot from 'array'  // see '#Choice of pivot' below
    create empty lists less and greater
    for each x in array
        if x ≤ pivot then append x to less'
        else append x to greater
    return concatenate(quicksort(less), list(pivot), quicksort(greater)) // two recursive calls


// In-place version
// left is the index of the leftmost element of the subarray
// right is the index of the rightmost element of the subarray (inclusive)
// number of elements in subarray = right-left+1
function partition(array, left, right, pivotIndex)
    pivotValue := array[pivotIndex]
    swap array[pivotIndex] and array[right]  // Move pivot to end
    storeIndex := left
    for i from left to right - 1  // left ≤ i < right
        if array[i] <= pivotValue
            swap array[i] and array[storeIndex]
            storeIndex := storeIndex + 1
    swap array[storeIndex] and array[right]  // Move pivot to its final place
    return storeIndex

function quicksort(array, left, right)
    // If the list has 2 or more items
    if left < right
        // See "#Choice of pivot" section below for possible choices
        choose any pivotIndex such that left ≤ pivotIndex ≤ right
        // Get lists of bigger and smaller items and final position of pivot
        pivotNewIndex := partition(array, left, right, pivotIndex)
        // Recursively sort elements smaller than the pivot
        quicksort(array, left, pivotNewIndex - 1)
        // Recursively sort elements at least as big as the pivot
        quicksort(array, pivotNewIndex + 1, right)
